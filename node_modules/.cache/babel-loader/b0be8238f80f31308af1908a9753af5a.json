{"ast":null,"code":"var _jsxFileName = \"/home/trellis/react-node-app/client/src/layout/LeafletMap.js\",\n    _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { MapContainer, TileLayer, Marker, Tooltip } from 'react-leaflet';\nimport L from 'leaflet';\nimport MarkerClusterGroup from 'react-leaflet-cluster';\nimport Skeleton from '@mui/material/Skeleton';\nimport { iconTractorIdle, iconTractorOnMission, iconTractorUnreachable, iconDroneIdle, iconDroneOnMission, iconDroneUnreachable } from '../../public/icons';\nimport '../styles.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar idle_status = 'idle';\nvar on_mission_status = 'on-mission';\nvar unreachable_status = 'unreachable';\n\nfunction getIconByTypeAndStatus(type, status) {\n  var icon = null;\n\n  switch (status) {\n    case idle_status:\n      icon = type === 'drone' ? iconDroneIdle : iconTractorIdle;\n      break;\n\n    case on_mission_status:\n      icon = type === 'drone' ? iconDroneOnMission : iconTractorOnMission;\n      break;\n\n    case unreachable_status:\n      icon = type === 'drone' ? iconDroneUnreachable : iconTractorUnreachable;\n      break;\n\n    default:\n  }\n\n  return icon;\n}\n\nfunction LeafletMap(_ref) {\n  _s();\n\n  var _this = this;\n\n  var data = _ref.data;\n\n  var prepareTooltipText = function prepareTooltipText(element) {\n    var tooltipText = /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n\n    if (Object.prototype.hasOwnProperty.call(element, '_id') && Object.prototype.hasOwnProperty.call(element, 'type') && Object.prototype.hasOwnProperty.call(element, 'status')) {\n      tooltipText = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"front-tooltip-class\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"Hello \", element.type, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 27\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 55\n        }, _this), \"Your status is '\", element.status, \"' right now...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 27\n      }, _this);\n    }\n\n    return tooltipText;\n  };\n\n  var prepareDisplay = useMemo(function () {\n    return /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [65.74101998457737, 47.62268066406251],\n      zoom: 14,\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(MarkerClusterGroup, {\n        spiderfyDistanceMultiplier: 1,\n        showCoverageOnHover: true,\n        maxClusterRadius: 50,\n        spiderfyOnMaxZoom: true,\n        polygonOptions: {\n          fillColor: '#ffffff',\n          color: '#f00800',\n          weight: 5,\n          opacity: 1,\n          fillOpacity: 0.8\n        },\n        children: data.vehicles.map(function (element) {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: [element.location.latitude, element.location.longitude],\n            draggable: true,\n            icon: getIconByTypeAndStatus(element.type, element.status),\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              opacity: '0.8',\n              direction: 'top',\n              offset: L.point(0, -26),\n              closeOnClick: false,\n              sticky: true,\n              children: prepareTooltipText(element)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, _this)\n          }, element._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, _this);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data ? prepareDisplay : /*#__PURE__*/_jsxDEV(Skeleton, {\n      animation: \"wave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 36\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LeafletMap, \"BA8tbffEKUZdN0fpCWO6s4HYyx0=\");\n\n_c = LeafletMap;\nLeafletMap.propTypes = {\n  data: PropTypes.object\n};\nexport default LeafletMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeafletMap\");","map":{"version":3,"sources":["/home/trellis/react-node-app/client/src/layout/LeafletMap.js"],"names":["useMemo","PropTypes","MapContainer","TileLayer","Marker","Tooltip","L","MarkerClusterGroup","Skeleton","iconTractorIdle","iconTractorOnMission","iconTractorUnreachable","iconDroneIdle","iconDroneOnMission","iconDroneUnreachable","idle_status","on_mission_status","unreachable_status","getIconByTypeAndStatus","type","status","icon","LeafletMap","data","prepareTooltipText","element","tooltipText","Object","prototype","hasOwnProperty","call","prepareDisplay","fillColor","color","weight","opacity","fillOpacity","vehicles","map","location","latitude","longitude","point","_id","propTypes","object"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { MapContainer, \n         TileLayer,\n         Marker,\n         Tooltip, \n} from 'react-leaflet';\nimport L from 'leaflet';\nimport MarkerClusterGroup from 'react-leaflet-cluster'\nimport Skeleton from '@mui/material/Skeleton';\nimport { iconTractorIdle, \n         iconTractorOnMission,\n         iconTractorUnreachable, \n         iconDroneIdle,\n         iconDroneOnMission,\n         iconDroneUnreachable ,\n} from '../../public/icons';\nimport '../styles.css';\n\nconst idle_status = 'idle';\nconst on_mission_status = 'on-mission';\nconst unreachable_status = 'unreachable';\n\nfunction getIconByTypeAndStatus(type, status){\n    var icon = null;\n    switch(status) {\n        case idle_status:\n           icon = type === 'drone' ? iconDroneIdle : iconTractorIdle;\n          break;\n        case on_mission_status:\n            icon = type === 'drone' ? iconDroneOnMission : iconTractorOnMission;\n          break;\n        case unreachable_status:\n            icon = type === 'drone' ? iconDroneUnreachable : iconTractorUnreachable;\n            break;\n        default:\n      }\n    return icon;     \n}\nfunction LeafletMap({ data }) {\n    const prepareTooltipText = (element) => {\n        var tooltipText = <></>\n        if(Object.prototype.hasOwnProperty.call(element, '_id') &&\n           Object.prototype.hasOwnProperty.call(element, 'type') &&\n           Object.prototype.hasOwnProperty.call(element, 'status')) {\n            tooltipText = <div className='front-tooltip-class'>\n                          <b>Hello {element.type}!</b><br/>\n                          Your status is '{element.status}' right now...\n                          </div>\n        }\n        return tooltipText;\n    }\n\n    const prepareDisplay = useMemo(\n        () => (\n            <MapContainer center={[65.74101998457737, 47.62268066406251]} zoom={14} scrollWheelZoom={true}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' />\n                <MarkerClusterGroup\n                    spiderfyDistanceMultiplier={1}\n                    showCoverageOnHover={true}\n                    maxClusterRadius={50}\n                    spiderfyOnMaxZoom={true}\n                    polygonOptions={{\n                        fillColor: '#ffffff',\n                        color: '#f00800',\n                        weight: 5,\n                        opacity: 1,\n                        fillOpacity: 0.8,\n                    }}\n                >\n                    {data.vehicles.map(element => (\n                        <Marker\n                            key={element._id}\n                            position={[\n                                element.location.latitude,\n                                element.location.longitude\n                            ]}\n                            draggable={true}\n                            icon={getIconByTypeAndStatus(element.type, element.status)}\n                        >\n                            <Tooltip\n                                opacity={'0.8'}\n                                direction={'top'}\n                                offset={L.point(0, -26)}\n                                closeOnClick={false}\n                                sticky={true}>\n                                {prepareTooltipText(element)}\n                            </Tooltip>\n                        </Marker>\n                    ))}\n                </MarkerClusterGroup>\n            </MapContainer>\n        ),[data]);\n\n      return (\n        <div>\n        { data ? prepareDisplay :  <Skeleton animation=\"wave\" /> }\n      </div>\n      );\n}\n\nLeafletMap.propTypes = {\n    data: PropTypes.object,\n};\n  \nexport default LeafletMap;"]},"metadata":{},"sourceType":"module"}