{"ast":null,"code":"var _jsxFileName = \"/home/trellis/react-node-app/client/src/api/DataProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { getRequestContext } from './Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function DataProvider(_ref) {\n  _s();\n\n  let {\n    calculator: Calculator,\n    layout: Layout,\n    url\n  } = _ref;\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    const updateData = () => {\n      axios.get(url).then(response => {\n        console.log(\"SUCCESS\", response);\n        setData(response.data);\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    const timer = setInterval(() => {\n      updateData();\n    }, 10000);\n    updateData();\n    return () => clearInterval(timer);\n  }, [url]);\n  const {\n    Provider\n  } = getRequestContext;\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: data,\n    children: /*#__PURE__*/_jsxDEV(Calculator, {\n      layout: Layout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DataProvider, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n\n_c = DataProvider;\nDataProvider.propTypes = {\n  calculator: PropTypes.func.isRequired,\n  url: PropTypes.string.isRequired\n};\nexport default DataProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"sources":["/home/trellis/react-node-app/client/src/api/DataProvider.js"],"names":["React","Component","useState","useEffect","PropTypes","axios","getRequestContext","DataProvider","calculator","Calculator","layout","Layout","url","data","setData","updateData","get","then","response","console","log","catch","error","timer","setInterval","clearInterval","Provider","propTypes","func","isRequired","string"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,WAAlC;;AAEA,OAAO,SAASC,YAAT,OAAuE;AAAA;;AAAA,MAAjD;AAAEC,IAAAA,UAAU,EAAGC,UAAf;AAA2BC,IAAAA,MAAM,EAAEC,MAAnC;AAA2CC,IAAAA;AAA3C,GAAiD;AAC1E,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMY,UAAU,GAAG,MAAM;AACrBV,MAAAA,KAAK,CAACW,GAAN,CAAUJ,GAAV,EAAeK,IAAf,CAAoBC,QAAQ,IAAI;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,QAAvB;AACAJ,QAAAA,OAAO,CAACI,QAAQ,CAACL,IAAV,CAAP;AACH,OAHD,EAGGQ,KAHH,CAGSC,KAAK,IAAI;AACdH,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,OALD;AAMD,KAPH;;AASE,UAAMC,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC9BT,MAAAA,UAAU;AACX,KAFwB,EAEtB,KAFsB,CAAzB;AAIAA,IAAAA,UAAU;AAEV,WAAO,MAAKU,aAAa,CAACF,KAAD,CAAzB;AACL,GAjBQ,EAiBP,CAACX,GAAD,CAjBO,CAAT;AAmBA,QAAM;AAAEc,IAAAA;AAAF,MAAepB,iBAArB;AAEA,sBACI,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEO,IAAjB;AAAA,2BACI,QAAC,UAAD;AAAY,MAAA,MAAM,EAAEF;AAApB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA7BeJ,Y;;KAAAA,Y;AA+BhBA,YAAY,CAACoB,SAAb,GAAyB;AACrBnB,EAAAA,UAAU,EAAEJ,SAAS,CAACwB,IAAV,CAAeC,UADN;AAErBjB,EAAAA,GAAG,EAAER,SAAS,CAAC0B,MAAV,CAAiBD;AAFD,CAAzB;AAKA,eAAetB,YAAf","sourcesContent":["\nimport React, { Component, useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { getRequestContext } from './Context'\n\nexport function DataProvider({ calculator : Calculator, layout: Layout, url }){\n    const [data, setData] = useState(null);\n\n    useEffect(() =>{\n        const updateData = () => {\n            axios.get(url).then(response => {\n                console.log(\"SUCCESS\", response)\n                setData(response.data)\n            }).catch(error => {\n                console.log(error)\n            })\n          }\n\n          const timer = setInterval(() => {\n            updateData()\n          }, 10000);\n\n          updateData();\n\n          return ()=> clearInterval(timer) \n    },[url])\n\n    const { Provider } = getRequestContext;\n\n    return(\n        <Provider value={data}>\n            <Calculator layout={Layout}/>\n        </Provider>\n    )\n}\n\nDataProvider.propTypes = {\n    calculator: PropTypes.func.isRequired,\n    url: PropTypes.string.isRequired,\n};\n\nexport default DataProvider;"]},"metadata":{},"sourceType":"module"}