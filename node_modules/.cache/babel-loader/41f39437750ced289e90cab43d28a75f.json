{"ast":null,"code":"import _slicedToArray from \"/home/trellis/react-node-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/trellis/react-node-app/client/src/layout/LeafletMap.js\",\n    _s = $RefreshSig$();\n\nimport { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { TransitionProps } from '@mui/material/transitions';\nimport { MapContainer, TileLayer, Marker, Tooltip } from 'react-leaflet';\nimport L from 'leaflet';\nimport MarkerClusterGroup from 'react-leaflet-cluster';\nimport Skeleton from '@mui/material/Skeleton';\nimport { iconTractor, iconDrone } from '../layout/icons/Icon';\nimport '../styles.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LeafletMap(_ref) {\n  _s();\n\n  var _this = this;\n\n  var data = _ref.data;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeVehicle = _useState2[0],\n      setActiveVehicle = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      open = _useState4[0],\n      setOpen = _useState4[1];\n\n  var prepareTooltipText = function prepareTooltipText(element) {\n    var tooltipText = /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n\n    if (Object.prototype.hasOwnProperty.call(element, '_id') && Object.prototype.hasOwnProperty.call(element, 'type') && Object.prototype.hasOwnProperty.call(element, 'status')) {\n      tooltipText = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"front-tooltip-class\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"Hello \", element.type, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 27\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 55\n        }, _this), \"Your status is '\", element.status, \"' right now...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 27\n      }, _this);\n    }\n\n    return tooltipText;\n  };\n\n  var prepareDisplay = useMemo(function () {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [65.74101998457737, 47.62268066406251],\n        zoom: 14,\n        scrollWheelZoom: true,\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n          attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(MarkerClusterGroup, {\n          spiderfyDistanceMultiplier: 1,\n          showCoverageOnHover: true,\n          maxClusterRadius: 150,\n          spiderfyOnMaxZoom: true,\n          polygonOptions: {\n            fillColor: '#ffffff',\n            color: '#f00800',\n            weight: 5,\n            opacity: 1,\n            fillOpacity: 0.8\n          },\n          children: data.vehicles.map(function (element) {\n            return /*#__PURE__*/_jsxDEV(Marker, {\n              position: [element.location.latitude, element.location.longitude],\n              draggable: true,\n              onClick: function onClick() {\n                setActiveVehicle(element);\n              },\n              icon: element.type === 'drone' ? iconDrone : iconTractor,\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                opacity: '0.8',\n                direction: 'top',\n                offset: L.point(0, -26),\n                closeOnClick: false,\n                sticky: true,\n                children: prepareTooltipText(element)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 33\n              }, _this)\n            }, element._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 29\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: open,\n        TransitionComponent: Transition,\n        keepMounted: true,\n        onClose: handleClose,\n        \"aria-describedby\": \"alert-dialog-slide-description\",\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Use Google's location service?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n            id: \"alert-dialog-slide-description\",\n            children: \"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClose,\n            children: \"Disagree\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClose,\n            children: \"Agree\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 32\n      }, _this)]\n    }, void 0, true);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data ? prepareDisplay : /*#__PURE__*/_jsxDEV(Skeleton, {\n      animation: \"wave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 36\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LeafletMap, \"1ueCFA/i5RE4lfXuB9jFzot4NIs=\");\n\n_c = LeafletMap;\nLeafletMap.propTypes = {\n  data: PropTypes.object\n};\nexport default LeafletMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeafletMap\");","map":{"version":3,"sources":["/home/trellis/react-node-app/client/src/layout/LeafletMap.js"],"names":["useMemo","useState","PropTypes","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","TransitionProps","MapContainer","TileLayer","Marker","Tooltip","L","MarkerClusterGroup","Skeleton","iconTractor","iconDrone","LeafletMap","data","activeVehicle","setActiveVehicle","open","setOpen","prepareTooltipText","element","tooltipText","Object","prototype","hasOwnProperty","call","type","status","prepareDisplay","fillColor","color","weight","opacity","fillOpacity","vehicles","map","location","latitude","longitude","point","_id","Transition","handleClose","propTypes","object"],"mappings":"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","sourcesContent":["import { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { TransitionProps } from '@mui/material/transitions';\nimport { MapContainer, \n         TileLayer,\n         Marker,\n         Tooltip, \n} from 'react-leaflet';\nimport L from 'leaflet';\nimport MarkerClusterGroup from 'react-leaflet-cluster'\nimport Skeleton from '@mui/material/Skeleton';\nimport { iconTractor, iconDrone } from '../layout/icons/Icon';\nimport '../styles.css';\n\nfunction LeafletMap({ data }) {\n    const [activeVehicle, setActiveVehicle] = useState(null);\n    const [open, setOpen] = useState(false);\n\n    const prepareTooltipText = (element) => {\n        var tooltipText = <></>\n        if(Object.prototype.hasOwnProperty.call(element, '_id') &&\n           Object.prototype.hasOwnProperty.call(element, 'type') &&\n           Object.prototype.hasOwnProperty.call(element, 'status')) {\n            tooltipText = <div className='front-tooltip-class'>\n                          <b>Hello {element.type}!</b><br/>\n                          Your status is '{element.status}' right now...\n                          </div>\n        }\n        return tooltipText;\n    }\n\n    const prepareDisplay = useMemo(\n        () => (\n            <>\n                <MapContainer center={[65.74101998457737, 47.62268066406251]} zoom={14} scrollWheelZoom={true}>\n                    <TileLayer\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' />\n                    <MarkerClusterGroup\n                        spiderfyDistanceMultiplier={1}\n                        showCoverageOnHover={true}\n                        maxClusterRadius={150}\n                        spiderfyOnMaxZoom={true}\n                        polygonOptions={{\n                            fillColor: '#ffffff',\n                            color: '#f00800',\n                            weight: 5,\n                            opacity: 1,\n                            fillOpacity: 0.8,\n                        }}\n                    >\n                        {data.vehicles.map(element => (\n                            <Marker\n                                key={element._id}\n                                position={[\n                                    element.location.latitude,\n                                    element.location.longitude\n                                ]}\n                                draggable={true}\n                                onClick={() => {\n                                    setActiveVehicle(element);\n                                } }\n                                icon={element.type === 'drone' ? iconDrone : iconTractor}\n                            >\n                                <Tooltip\n                                    opacity={'0.8'}\n                                    direction={'top'}\n                                    offset={L.point(0, -26)}\n                                    closeOnClick={false}\n                                    sticky={true}>\n                                    {prepareTooltipText(element)}\n                                </Tooltip>\n                            </Marker>\n                        ))}\n                    </MarkerClusterGroup>\n                </MapContainer><Dialog\n                    open={open}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    onClose={handleClose}\n                    aria-describedby=\"alert-dialog-slide-description\"\n                >\n                    <DialogTitle>{\"Use Google's location service?\"}</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id=\"alert-dialog-slide-description\">\n                            Let Google help apps determine location. This means sending anonymous\n                            location data to Google, even when no apps are running.\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose}>Disagree</Button>\n                        <Button onClick={handleClose}>Agree</Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        ),[data]);\n\n      return (\n        <div>\n        { data ? prepareDisplay :  <Skeleton animation=\"wave\" /> }\n      </div>\n      );\n}\n\nLeafletMap.propTypes = {\n    data: PropTypes.object,\n};\n  \nexport default LeafletMap;"]},"metadata":{},"sourceType":"module"}