{"ast":null,"code":"import _toConsumableArray from \"/home/trellis/react-node-app/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/home/trellis/react-node-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/trellis/react-node-app/client/src/containers/MapContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment } from 'react';\nimport DataProvider from '../api/DataProvider';\nimport { MapCalculator } from '../components/MapCalculator';\nimport LeafletMap from '../layout/LeafletMap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar configurationData = require(\"../config.js\");\n\nvar dataUrl = \"\".concat(configurationData.web.host, \":{configurationData.web.port}\");\n\nfunction MapContainer() {\n  _s();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataUrl = _useState2[0],\n      setDataUrl = _useState2[1];\n\n  useEffect(function () {\n    var usersCounter = 0;\n\n    if (geoData) {\n      geoData.map(function (current) {\n        console.log(geoData);\n\n        if (isValid(current.country) && typeof current.users === 'number' && current.users > 0) {\n          setCountriesUsersLIst(function (countriesUsersLIst) {\n            return [].concat(_toConsumableArray(countriesUsersLIst), [[current.country, current.users]]);\n          });\n          usersCounter += current.users;\n        }\n      });\n    }\n\n    setTotalUsers(usersCounter);\n  }, [geoData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DataProvider, {\n      calculator: MapCalculator,\n      layout: LeafletMap,\n      url: dataUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(MapContainer, \"HdKFBvg8+BSfm2RzJwUglrGOD5Y=\");\n\n_c = MapContainer;\nexport default MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["/home/trellis/react-node-app/client/src/containers/MapContainer.js"],"names":["React","Fragment","DataProvider","MapCalculator","LeafletMap","configurationData","require","dataUrl","web","host","MapContainer","useState","setDataUrl","useEffect","usersCounter","geoData","map","current","console","log","isValid","country","users","setCountriesUsersLIst","countriesUsersLIst","setTotalUsers"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,OAAOC,UAAP,MAAuB,sBAAvB;;;;AAEA,IAAMC,iBAAiB,GAAGC,OAAO,CAAC,cAAD,CAAjC;;AAEA,IAAMC,OAAO,aAAMF,iBAAiB,CAACG,GAAlB,CAAsBC,IAA5B,kCAAb;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACpB,kBAA8BC,QAAQ,CAAC,EAAD,CAAtC;AAAA;AAAA,MAAOJ,OAAP;AAAA,MAAgBK,UAAhB;;AAEAC,EAAAA,SAAS,CAAC,YAAK;AACX,QAAIC,YAAY,GAAG,CAAnB;;AACA,QAAGC,OAAH,EAAY;AACVA,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAAC,OAAO,EAAI;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;;AACA,YAAGK,OAAO,CAACH,OAAO,CAACI,OAAT,CAAP,IAA4B,OAAOJ,OAAO,CAACK,KAAf,KAAyB,QAArD,IAAiEL,OAAO,CAACK,KAAR,GAAgB,CAApF,EAAsF;AACpFC,UAAAA,qBAAqB,CAAC,UAAAC,kBAAkB;AAAA,gDAAQA,kBAAR,IAA4B,CAACP,OAAO,CAACI,OAAT,EAAkBJ,OAAO,CAACK,KAA1B,CAA5B;AAAA,WAAnB,CAArB;AACAR,UAAAA,YAAY,IAAIG,OAAO,CAACK,KAAxB;AACD;AACF,OAND;AAOD;;AACDG,IAAAA,aAAa,CAACX,YAAD,CAAb;AACD,GAZM,EAYL,CAACC,OAAD,CAZK,CAAT;AAcA,sBACE;AAAA,2BACE,QAAC,YAAD;AAAc,MAAA,UAAU,EAAEZ,aAA1B;AAAyC,MAAA,MAAM,EAAEC,UAAjD;AAA6D,MAAA,GAAG,EAAEG;AAAlE;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKH;;GAtBQG,Y;;KAAAA,Y;AAwBT,eAAeA,YAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport DataProvider from '../api/DataProvider';\nimport { MapCalculator } from '../components/MapCalculator';\nimport LeafletMap from '../layout/LeafletMap';\n\nconst configurationData = require(\"../config.js\")\n \nconst dataUrl = `${configurationData.web.host}:{configurationData.web.port}`;\n\nfunction MapContainer() {\n    const [dataUrl, setDataUrl] = useState('');\n\n    useEffect(() =>{\n        let usersCounter = 0;\n        if(geoData) {\n          geoData.map(current => {\n            console.log(geoData)\n            if(isValid(current.country) && typeof current.users === 'number' && current.users > 0){\n              setCountriesUsersLIst(countriesUsersLIst => [...countriesUsersLIst, [current.country, current.users]]);\n              usersCounter += current.users;\n            }\n          });\n        }\n        setTotalUsers(usersCounter);\n      },[geoData])\n\n    return (\n      <>\n        <DataProvider calculator={MapCalculator} layout={LeafletMap} url={dataUrl}/>\n      </>\n    );\n}\n \nexport default MapContainer;"]},"metadata":{},"sourceType":"module"}