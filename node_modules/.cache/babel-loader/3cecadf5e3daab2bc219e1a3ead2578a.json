{"ast":null,"code":"import _slicedToArray from \"/home/trellis/react-node-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/trellis/react-node-app/client/src/layout/LeafletMap.js\",\n    _s = $RefreshSig$();\n\nimport { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { MapContainer, TileLayer, Marker, Tooltip } from 'react-leaflet';\nimport L from 'leaflet';\nimport MarkerClusterGroup from 'react-leaflet-cluster';\nimport Skeleton from '@mui/material/Skeleton';\nimport { iconTractor, iconDrone } from '../layout/icons/Icon';\nimport '../styles.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LeafletMap(_ref) {\n  _s();\n\n  var _this = this;\n\n  var data = _ref.data;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeVehicle = _useState2[0],\n      setActiveVehicle = _useState2[1];\n\n  var prepareTooltipText = function prepareTooltipText(element) {\n    var tooltipText = /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n\n    if (Object.prototype.hasOwnProperty.call(element, '_id') && Object.prototype.hasOwnProperty.call(element, 'type') && Object.prototype.hasOwnProperty.call(element, 'status')) {\n      tooltipText = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"front-tooltip-class\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"Hello \", element.type, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 45\n        }, _this), \"Your status is '\", element.status, \"' right now...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 27\n      }, _this);\n    }\n\n    return tooltipText;\n  };\n\n  var prepareDisplay = useMemo(function () {\n    return /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [55.74101998457737, 37.62268066406251],\n      zoom: 14,\n      scrollWheelZoom: false,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(MarkerClusterGroup, {\n        spiderfyDistanceMultiplier: 1,\n        showCoverageOnHover: false,\n        maxClusterRadius: 150,\n        spiderfyOnMaxZoom: true,\n        polygonOptions: {\n          fillColor: '#ffffff',\n          color: '#f00800',\n          weight: 5,\n          opacity: 1,\n          fillOpacity: 0.8\n        },\n        children: data.vehicles.map(function (element) {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: [element.location.latitude, element.location.longitude],\n            draggable: true,\n            onClick: function onClick() {\n              setActiveVehicle(element);\n            },\n            icon: element.type === 'drone' ? iconDrone : iconTractor,\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              opacity: '0.8',\n              direction: 'top',\n              offset: L.point(0, -26),\n              closeOnClick: false,\n              sticky: true,\n              children: prepareTooltipText(element)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 25\n            }, _this)\n          }, element._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 18\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, _this);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data ? prepareDisplay : /*#__PURE__*/_jsxDEV(Skeleton, {\n      animation: \"wave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 36\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LeafletMap, \"zDjFjhM8Mko/7+orc5bY0/jfkmc=\");\n\n_c = LeafletMap;\nLeafletMap.propTypes = {\n  data: PropTypes.object.isRequired\n};\nexport default LeafletMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeafletMap\");","map":{"version":3,"sources":["/home/trellis/react-node-app/client/src/layout/LeafletMap.js"],"names":["useMemo","useState","PropTypes","MapContainer","TileLayer","Marker","Tooltip","L","MarkerClusterGroup","Skeleton","iconTractor","iconDrone","LeafletMap","data","activeVehicle","setActiveVehicle","prepareTooltipText","element","tooltipText","Object","prototype","hasOwnProperty","call","type","status","prepareDisplay","fillColor","color","weight","opacity","fillOpacity","vehicles","map","location","latitude","longitude","point","_id","propTypes","object","isRequired"],"mappings":";;;;;AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,EACSC,SADT,EAESC,MAFT,EAGSC,OAHT,QAIO,eAJP;AAKA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,sBAAvC;AACA,OAAO,eAAP;;;;AAEA,SAASC,UAAT,OAA8B;AAAA;;AAAA;;AAAA,MAARC,IAAQ,QAARA,IAAQ;;AAC1B,kBAA0CZ,QAAQ,CAAC,IAAD,CAAlD;AAAA;AAAA,MAAOa,aAAP;AAAA,MAAsBC,gBAAtB;;AAEA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD,EAAa;AACpC,QAAIC,WAAW,gBAAG,qCAAlB;;AACA,QAAGC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,OAArC,EAA8C,KAA9C,KACAE,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,OAArC,EAA8C,MAA9C,CADA,IAEAE,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,OAArC,EAA8C,QAA9C,CAFH,EAE4D;AACxDC,MAAAA,WAAW,gBAAG;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,gCACV;AAAA,+BAAUD,OAAO,CAACM,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,iBADU,eACkB;AAAA;AAAA;AAAA;AAAA,iBADlB,sBAEON,OAAO,CAACO,MAFf;AAAA;AAAA;AAAA;AAAA;AAAA,eAAd;AAIH;;AACD,WAAON,WAAP;AACH,GAXD;;AAaA,MAAMO,cAAc,GAAGzB,OAAO,CAC1B;AAAA,wBACI,QAAC,YAAD;AAAc,MAAA,MAAM,EAAE,CAAC,iBAAD,EAAoB,iBAApB,CAAtB;AAA8D,MAAA,IAAI,EAAE,EAApE;AAAwE,MAAA,eAAe,EAAE,KAAzF;AAAA,8BACI,QAAC,SAAD;AACI,QAAA,GAAG,EAAC,oDADR;AAEI,QAAA,WAAW,EAAC;AAFhB;AAAA;AAAA;AAAA;AAAA,eADJ,eAKK,QAAC,kBAAD;AACG,QAAA,0BAA0B,EAAE,CAD/B;AAEG,QAAA,mBAAmB,EAAE,KAFxB;AAGG,QAAA,gBAAgB,EAAE,GAHrB;AAIG,QAAA,iBAAiB,EAAE,IAJtB;AAKG,QAAA,cAAc,EAAE;AACZ0B,UAAAA,SAAS,EAAE,SADC;AAEZC,UAAAA,KAAK,EAAE,SAFK;AAGZC,UAAAA,MAAM,EAAE,CAHI;AAIZC,UAAAA,OAAO,EAAE,CAJG;AAKZC,UAAAA,WAAW,EAAE;AALD,SALnB;AAAA,kBAaAjB,IAAI,CAACkB,QAAL,CAAcC,GAAd,CAAkB,UAAAf,OAAO;AAAA,8BACtB,QAAC,MAAD;AAEI,YAAA,QAAQ,EAAE,CACNA,OAAO,CAACgB,QAAR,CAAiBC,QADX,EAENjB,OAAO,CAACgB,QAAR,CAAiBE,SAFX,CAFd;AAMI,YAAA,SAAS,EAAE,IANf;AAOI,YAAA,OAAO,EAAE,mBAAM;AACXpB,cAAAA,gBAAgB,CAACE,OAAD,CAAhB;AACH,aATL;AAUI,YAAA,IAAI,EAAEA,OAAO,CAACM,IAAR,KAAiB,OAAjB,GAA2BZ,SAA3B,GAAuCD,WAVjD;AAAA,mCAYI,QAAC,OAAD;AACI,cAAA,OAAO,EAAE,KADb;AAEI,cAAA,SAAS,EAAE,KAFf;AAGI,cAAA,MAAM,EAAEH,CAAC,CAAC6B,KAAF,CAAQ,CAAR,EAAW,CAAC,EAAZ,CAHZ;AAII,cAAA,YAAY,EAAE,KAJlB;AAKI,cAAA,MAAM,EAAE,IALZ;AAAA,wBAMSpB,kBAAkB,CAACC,OAAD;AAN3B;AAAA;AAAA;AAAA;AAAA;AAZJ,aACSA,OAAO,CAACoB,GADjB;AAAA;AAAA;AAAA;AAAA,mBADsB;AAAA,SAAzB;AAbA;AAAA;AAAA;AAAA;AAAA,eALL;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ;AAAA,GAD0B,EA6CxB,EA7CwB,CAA9B;AA+CE,sBACE;AAAA,cACExB,IAAI,GAAGY,cAAH,gBAAqB,QAAC,QAAD;AAAU,MAAA,SAAS,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA;AAD3B;AAAA;AAAA;AAAA;AAAA,UADF;AAKL;;GApEQb,U;;KAAAA,U;AAsETA,UAAU,CAAC0B,SAAX,GAAuB;AACnBzB,EAAAA,IAAI,EAAEX,SAAS,CAACqC,MAAV,CAAiBC;AADJ,CAAvB;AAIA,eAAe5B,UAAf","sourcesContent":["import { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { MapContainer, \n         TileLayer,\n         Marker,\n         Tooltip, \n} from 'react-leaflet';\nimport L from 'leaflet';\nimport MarkerClusterGroup from 'react-leaflet-cluster'\nimport Skeleton from '@mui/material/Skeleton';\nimport { iconTractor, iconDrone } from '../layout/icons/Icon';\nimport '../styles.css';\n\nfunction LeafletMap({ data }) {\n    const [activeVehicle, setActiveVehicle] = useState(null);\n\n    const prepareTooltipText = (element) => {\n        var tooltipText = <></>\n        if(Object.prototype.hasOwnProperty.call(element, '_id') &&\n           Object.prototype.hasOwnProperty.call(element, 'type') &&\n           Object.prototype.hasOwnProperty.call(element, 'status')) {\n            tooltipText = <div className='front-tooltip-class'>\n                <b>Hello {element.type}!</b><br/>\n                Your status is '{element.status}' right now...\n            </div>\n        }\n        return tooltipText;\n    }\n\n    const prepareDisplay = useMemo(\n        () => (\n            <MapContainer center={[55.74101998457737, 37.62268066406251]} zoom={14} scrollWheelZoom={false}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                 <MarkerClusterGroup\n                    spiderfyDistanceMultiplier={1}\n                    showCoverageOnHover={false}\n                    maxClusterRadius={150}\n                    spiderfyOnMaxZoom={true}\n                    polygonOptions={{\n                        fillColor: '#ffffff',\n                        color: '#f00800',\n                        weight: 5,\n                        opacity: 1,\n                        fillOpacity: 0.8,\n                    }}\n                >\n                {data.vehicles.map(element => (\n                    <Marker\n                        key={element._id}\n                        position={[\n                            element.location.latitude,\n                            element.location.longitude\n                        ]}\n                        draggable={true}\n                        onClick={() => {\n                            setActiveVehicle(element);\n                        }}\n                        icon={element.type === 'drone' ? iconDrone : iconTractor}\n                    >\n                        <Tooltip \n                            opacity={'0.8'}\n                            direction={'top'}\n                            offset={L.point(0, -26)}\n                            closeOnClick={false}\n                            sticky={true}>\n                                {prepareTooltipText(element)}\n                        </Tooltip>\n                    </Marker>\n                ))}\n            </MarkerClusterGroup>\n          </MapContainer>\n        ),[]);\n\n      return (\n        <div>\n        { data ? prepareDisplay :  <Skeleton animation=\"wave\" /> }\n      </div>\n      );\n}\n\nLeafletMap.propTypes = {\n    data: PropTypes.object.isRequired,\n};\n  \nexport default LeafletMap;"]},"metadata":{},"sourceType":"module"}