{"ast":null,"code":"import _objectSpread from \"/home/trellis/react-gallery-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/home/trellis/react-gallery-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/trellis/react-gallery-app/src/layout/TitlebarImageList.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport { useWidth } from '../customHooks/useWidth';\nimport { Typography } from '@mui/material';\nimport ImageList from '@mui/material/ImageList';\nimport ImageListItem from '@mui/material/ImageListItem';\nimport ImageListItemBar from '@mui/material/ImageListItemBar';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar AVAILABLE_SIZES = [150, 450, 600];\n\nfunction TitlebarImageList(_ref) {\n  _s();\n\n  var _this = this;\n\n  var imagesData = _ref.imagesData;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentImagesData = _useState2[0],\n      setCurrentImagesData = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      imageSearchResults = _useState4[0],\n      setImageSearchResults = _useState4[1];\n\n  var _useWidth = useWidth(),\n      windowWidth = _useWidth.width;\n\n  var navigate = useNavigate();\n  var imageQueryParams = '?w=248&fit=crop&auto=format';\n  var thumbnailQueryParams = '?w=248&fit=crop&auto=format&dpr=2 2x';\n\n  var routeToImageDetails = function routeToImageDetails(item) {\n    var path = \"/details\";\n    navigate(path, {\n      state: {\n        id: 1,\n        url: item.url,\n        title: item.title\n      }\n    });\n  };\n\n  useEffect(function () {\n    var data = imagesData;\n    data = data.map(function (element) {\n      var arr = element.url.split('/');\n      element.cols = Math.round(1);\n      element.rows = Math.round(1 + Math.random());\n      arr[3] = element.cols === 2 && element.rows === 2 ? AVAILABLE_SIZES[2] : element.cols === 2 || element.rows === 2 ? AVAILABLE_SIZES[1] : AVAILABLE_SIZES[0];\n      element.url = arr.join('/');\n      return element;\n    });\n    setCurrentImagesData(data);\n    setImageSearchResults(data);\n  }, [imagesData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentImagesData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery-menu\",\n        s: true,\n        style: {\n          width: \"\".concat(windowWidth)\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"headline-item\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h3\",\n            component: \"h4\",\n            children: \"Aqua Gallery\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          className: \"search-box-item\",\n          direction: \"row\",\n          justifyContent: \"flex-end\",\n          alignItems: \"center\",\n          spacing: 2,\n          sx: {\n            width: 400\n          },\n          children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n            id: \"search-box\",\n            disableClearable: true,\n            options: currentImagesData.map(function (option) {\n              return option.title;\n            }),\n            onKeyUp: function onKeyUp(event) {\n              setImageSearchResults(currentImagesData.filter(function (imageData) {\n                return imageData.title.includes(event.target.value);\n              }));\n            },\n            renderInput: function renderInput(params) {\n              return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                label: \"Search input\",\n                InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n                  type: 'search'\n                })\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, _this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ImageList, {\n        sx: {\n          width: windowWidth,\n          height: 1000\n        },\n        cols: 4,\n        rowHeight: 150,\n        variant: \"quilted\",\n        gap: 8,\n        children: imageSearchResults.map(function (item) {\n          return /*#__PURE__*/_jsxDEV(ImageListItem, {\n            cols: item.cols || 1,\n            rows: item.rows || 1,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              id: \"img-elm\",\n              src: \"\".concat(item.url, \"{imageQueryParams}\"),\n              srcSet: \"\".concat(item.url, \"{thumbnailQueryParams}\"),\n              alt: item.title,\n              loading: \"lazy\",\n              onClick: function onClick() {\n                return routeToImageDetails(item);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"title-bar-elm\",\n              children: /*#__PURE__*/_jsxDEV(ImageListItemBar, {\n                className: \"title-bar-\".concat(item.rows === 2 ? 'md' : 's'),\n                title: item.title,\n                position: \"top\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, _this)]\n          }, item.url, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null\n  }, void 0, false);\n}\n\n_s(TitlebarImageList, \"jnjjDozQ5d2LfuaC1lU1RjXgQ0Q=\", false, function () {\n  return [useWidth, useNavigate];\n});\n\n_c = TitlebarImageList;\nTitlebarImageList.propTypes = {\n  imagesData: PropTypes.array\n};\nexport default TitlebarImageList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TitlebarImageList\");","map":{"version":3,"sources":["/home/trellis/react-gallery-app/src/layout/TitlebarImageList.js"],"names":["useState","useEffect","useNavigate","PropTypes","useWidth","Typography","ImageList","ImageListItem","ImageListItemBar","TextField","Stack","Autocomplete","AVAILABLE_SIZES","TitlebarImageList","imagesData","currentImagesData","setCurrentImagesData","imageSearchResults","setImageSearchResults","windowWidth","width","navigate","imageQueryParams","thumbnailQueryParams","routeToImageDetails","item","path","state","id","url","title","data","map","element","arr","split","cols","Math","round","rows","random","join","option","event","filter","imageData","includes","target","value","params","InputProps","type","height","propTypes","array"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport { useWidth } from '../customHooks/useWidth';\n\nimport { Typography } from '@mui/material';\nimport ImageList from '@mui/material/ImageList';\nimport ImageListItem from '@mui/material/ImageListItem';\nimport ImageListItemBar from '@mui/material/ImageListItemBar';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nconst AVAILABLE_SIZES = [150, 450, 600];\n\nfunction TitlebarImageList({ imagesData }) {\n  const [currentImagesData, setCurrentImagesData] = useState(null);\n  const [imageSearchResults, setImageSearchResults] = useState(null);\n  const { width: windowWidth } = useWidth();\n  const navigate = useNavigate();\n  const imageQueryParams = '?w=248&fit=crop&auto=format';\n  const thumbnailQueryParams = '?w=248&fit=crop&auto=format&dpr=2 2x';\n\n  const routeToImageDetails = (item) => {\n    let path = `/details`;\n    navigate(path, { state: { id: 1, url: item.url, title: item.title } });\n  }\n\n  useEffect(() => {\n    var data = imagesData;\n    data = data.map((element) => {\n      var arr = element.url.split('/');\n      element.cols = Math.round(1);\n      element.rows = Math.round(1 + Math.random());\n      arr[3] = element.cols === 2 && element.rows === 2 ? AVAILABLE_SIZES[2] :\n        element.cols === 2 || element.rows === 2 ? AVAILABLE_SIZES[1] :\n          AVAILABLE_SIZES[0];\n      element.url = arr.join('/');\n      return element;\n    });\n    setCurrentImagesData(data);\n    setImageSearchResults(data);\n\n  }, [imagesData])\n\n  return (\n    <>\n      {currentImagesData ?\n        <>\n          <div className=\"gallery-menu\" s\n            style={{ width: `${windowWidth}` }}>\n            <div className=\"headline-item\">\n              <Typography variant=\"h3\" component=\"h4\">\n                Aqua Gallery\n              </Typography>\n            </div>\n            <Stack className=\"search-box-item\" direction=\"row\"\n              justifyContent=\"flex-end\"\n              alignItems=\"center\"\n              spacing={2} sx={{ width: 400 }}>\n              <Autocomplete\n                id=\"search-box\"\n                disableClearable\n                options={currentImagesData.map((option) => option.title)}\n                onKeyUp={(event) => {\n                  setImageSearchResults(currentImagesData.filter(imageData => imageData.title.includes(event.target.value)));\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Search input\"\n                    InputProps={{\n                      ...params.InputProps,\n                      type: 'search',\n                    }}\n                  />\n                )}\n              /></Stack>\n          </div>\n          <ImageList sx={{ width: windowWidth, height: 1000 }}\n            cols={4}\n            rowHeight={150}\n            variant=\"quilted\"\n            gap={8}>\n            {imageSearchResults.map((item) => (\n              <ImageListItem key={item.url} cols={item.cols || 1} rows={item.rows || 1}>\n                <img\n                  id=\"img-elm\"\n                  src={`${item.url}{imageQueryParams}`}\n                  srcSet={`${item.url}{thumbnailQueryParams}`}\n                  alt={item.title}\n                  loading=\"lazy\"\n                  onClick={() => routeToImageDetails(item)}\n                />\n                <div id=\"title-bar-elm\">\n                  <ImageListItemBar\n                    className={`title-bar-${item.rows === 2 ? 'md' : 's'}`}\n                    title={item.title}\n                    position={\"top\"}\n                  />\n                </div>\n              </ImageListItem>\n            ))}\n          </ImageList>\n        </> : null}\n    </>\n  );\n}\n\nTitlebarImageList.propTypes = {\n  imagesData: PropTypes.array,\n};\n\nexport default TitlebarImageList;"]},"metadata":{},"sourceType":"module"}